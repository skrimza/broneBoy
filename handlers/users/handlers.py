from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from utils.models import User
# from .router import router
from sqlalchemy.exc import IntegrityError
from settings import BASE_DIR
from states import ReserStateGroup
from keyboards.reply.main_kb import (
    first_panel_rkb,
    second_panel_rkb,
    action_builder,
    
)
from keyboards.reply.admin_kb import (
    basic_menu_rkb
)
from keyboards.inline import (choise_category_ikb,
                                choise_question_ikb,
                                control_choise_ikb)

router = Router()

@router.message(F.text.startswith('/start'))
async def start_command(message: Message):
    user = User(id=message.from_user.id)
    text = ''
    markup = None
    async with User.session() as session:
        # await session.execute(User.__table__.delete())
        # await session.commit()
        session.add(user)
        try:
            await session.commit()
        except IntegrityError:
            if user.id == 874255780:
                text = '–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞, –¥–∞–≤–∞–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º!'
                markup = basic_menu_rkb
            else:
                text = f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}, —á–µ–º —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Ç–µ–±—è?'
                markup = second_panel_rkb
        else:
            text = f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}! —è –±–æ—Ç, –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞—à–µ–π –¥–æ—Ä–æ–≥–æ–π Libertina! –ú–æ–≥—É –ª–∏ –±—ã—Ç—å –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω—ã–º?)'
            markup = first_panel_rkb
        finally:
            await message.answer(text=text, reply_markup=markup)

# –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å Libertina
@router.message(F.text == first_panel_rkb.keyboard[0][0].text)
async def info_handler(message: Message):
    await message.answer_photo(
        photo=BufferedInputFile.from_file(
            path=BASE_DIR / 'static/image1.jpg'
        ),
        caption='Libertina - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –Ω–∞ –æ–¥–µ–∂–¥–µ,' \
                    ' –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ—Å—Ç—å.' \
                    ' –°–æ–∑–¥–∞—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞, –≤–æ–ø–ª–æ—â–∞–µ—Ç –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å' \
                    ' –∏ –∫—Ä–∞—Å–æ—Ç—É, —Ä–∏—Å—É—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –¥–µ–≤—É—à–µ–∫ –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–∞—Ö –∏' \
                    ' —Å–≤–∏—Ç—à–æ—Ç–∞—Ö –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –¥–ª—è –í–∞—Å.', 
                    reply_markup=second_panel_rkb
    )
 
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–¥–µ–ª–∏–π
@router.message(F.text == first_panel_rkb.keyboard[1][0].text or F.text == second_panel_rkb.keyboard[0][0].text)
async def choise(message: Message):
    await message.delete()
    await message.answer(text='–•–æ—Ä–æ—à–æ, —è –ø–æ–∫–∞–∂—É —Ä–∞–±–æ—Ç—ã –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—ã,'\
                        ' –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑–¥–µ–ª–∏–π!', 
                        reply_markup=choise_category_ikb)


# –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–¥–µ–ª–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.callback_query(F.data == 't-shirt')
async def choise_tshirt(callback: CallbackQuery):
    category = '–º–∞–π–∫–∏'
    await callback.message.answer(text='–ß—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?',
                                    reply_markup=choise_question_ikb)


@router.callback_query(F.data == 'sweatshirt')
async def choise_sweatshirt(callback: CallbackQuery):
    category = '—Å–≤–∏—Ç—à–æ—Ç—ã'
    await callback.message.answer(text='–ß—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?',
                                    reply_markup=choise_question_ikb)

# –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞
@router.callback_query(F.data == 'yes')
async def agreement(callback: CallbackQuery):
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ!üëå –Ω–µ –∂–µ–ª–∞–µ—à—å –ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?)'\
                                        ' –Ø –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –∑–∞–π–º—É, –±—É–∫–≤–∞–ª—å–Ω–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç'\
                                        ' –∏ –≤—Å—ë! –¢–∞–∫ –∂–µ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'\
                                        ' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–¥–µ–ª–∏—è –Ω–∞ –∑–∞–∫–∞–∑, –∏ –æ—Ç–º–µ–Ω–∏—Ç—å'\
                                        ' –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ä–µ–º–µ–Ω–∏—Ç—å —Å –∑–∞–∫–∞–∑–æ–º!',
                                    reply_markup=control_choise_ikb)

# –∑–¥–µ—Å—å –ø–æ—à–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
@router.callback_query(F.data == 'sure')
async def place_order(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–û—Ç–ª–∏—á–Ω–æ!üëå –¢–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º!'\
                                        ' –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–æ–º–µ—Ä'\
                                        ' –∏–∑–¥–µ–ª–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!'\
                                        ' –æ–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –ø–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏–∑–¥–µ–ª–∏—è!')
    await state.set_state(ReserStateGroup.number_product)
    await callback.message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è!</b>')


    
# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ—Ç
@router.callback_query(F.data == 'no')
async def refusal(callback: CallbackQuery):
    await callback.message.answer(text='–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –í–∞–º –ø–æ –¥—É—à–µüòî'\
                                        ' –ú–æ–∂–µ—Ç —è –º–æ–≥—É –í–∞—Å —Å–æ–µ–¥–∏–Ω–∏—Ç—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –í—ã'\
                                        ' –º–æ–≥–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞ –∑–∞–∫–∞–∑ –∏–∑–¥–µ–ª–∏–µ, –∏–ª–∏ –≤—Å–µ –∂–µ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É?',
                                        reply_markup=action_builder.as_markup(resize_keyboard=True))


# @router.message(F.text == first_panel_rkb.keyboard[2][1].text or F.text == second_panel_rkb.keyboard[1][1].text)
# async def creative_work(message: Message):
#     await message.answer(text=f'–°–ø–∞—Å–∏–±–æ, {message.from_user.first_name}, –∑–∞ —Ç–æ,'\
#                                ' —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º. –±—É–¥–µ–º —Å —Ä–∞–¥–æ—Å—Ç—å—é'\
#                                 ' –∂–¥–∞—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞!üåø –•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–Ω—è!)')
